# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bU0rqQGR-kqs5K4IHCo7R-OiL8nh4-nB

# PARSING PART (Data Collecting)
"""

# Commented out IPython magic to ensure Python compatibility.
import requests
from bs4 import BeautifulSoup
from random import randint
import random
import re
from random import randint
# %pip install fake-useragent
from fake_useragent import UserAgent
import time
import json

import csv
import itertools
import pandas as pd
import numpy as np

def call_headers():
    ua = UserAgent()
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'user-agent': ua.random
    }
    return headers

def get_styles_url(url, file_name):
    req = requests.get(url, headers=call_headers())
    soup = BeautifulSoup(req.text, 'html.parser')
    field_a = soup.find('div', id='ba-content').find_all('a')
    styles_links = ['https://www.beeradvocate.com'+link.get('href')+'?sort=revsD&start' for link in field_a[:len(field_a)-1]]
    styles_names = [name.text.strip() for name in field_a]
    with open(file_name+".json", "w") as outfile:
        json.dump(dict(zip(styles_names, styles_links)), outfile)

get_styles_url('https://www.beeradvocate.com/beer/styles/', 'links_per_style')

def json_to_list(file_name):
    list_of_links = []
    with open(file_name) as value:
        dictionary = json.load(value)
        for iterator in dictionary:
            list_of_links.append(dictionary[iterator])
    return list_of_links

json_to_list('/content/Parsed Data/links_per_style.json')

def get_substyle_describtion(file_name, list_of_links_per_style):
    fields = ['BeerStyle', 'StyleDescribtion', 'StyleABV', 'StyleIBU'] 
    style_describtions = []
    for url in list_of_links_per_style:
        req = requests.get(url, headers=call_headers())
        soup = BeautifulSoup(req.text, 'html.parser')

        style_name = soup.find('div', class_='titleBar').text.strip()
        try:
            style_description = soup.select_one('div[style="font-size:1.2em; padding:2px; margin-bottom:10px;"]').text
        except:
            style_description = 'Not Given'
        try:
            style_abv = soup.find_all('span', class_='Tooltip')[0].text.split(' ')[1].rstrip("%").strip()
        except:
            style_abv = 'Not Given'
        try:
            style_ibu = soup.find_all('span', class_='Tooltip')[1].text.split(' ')[1].strip()
        except:
            style_ibu = 'Not Given'
        style_describtions.append([style_name, style_description[0:style_description.index("ABV")].replace('\n', ''), style_abv, style_ibu])
        time.sleep(randint(1,2))
    with open(file_name, 'w') as f:
        write = csv.writer(f, delimiter = ";")
        write.writerow(fields)
        write.writerows(style_describtions)

get_substyle_describtion('styles_and_attributes.csv', json_to_list('/content/Parsed Data/links_per_style.json'))

def json_to_dict(file_name):
    list_of_links = []
    with open(file_name) as value:
        dictionary = json.load(value)
    return dictionary

dict_of_l = json_to_dict('/content/Parsed Data/links_per_style.json')
del dict_of_l['American IPA']
del dict_of_l['New England IPA']
dict_of_l

def get_all_beers_url(start, end, dict_of_url, file_name):
    parts = list(dict_of_url.keys())
    dict_of_links = {}
    for name in parts[start:end]:
        print(name)
        my_list = []
        req = requests.get(dict_of_url[name], headers=call_headers())
        soup = BeautifulSoup(req.text, 'html.parser')
        page_counts = int(soup.select_one('span[style="color: #FFFFFF"]').text.strip().split('(')[1].split(' ')[2].rstrip(')'))
        for i in range(0, page_counts, 50):
            page_req = requests.get(dict_of_url[name]+'='+str(i), headers=call_headers())
            page_soup = BeautifulSoup(page_req.text, 'html.parser')
            all_tr = page_soup.find_all('tr')
            a_list = [a.find_all('a')[0] for a in all_tr[3:len(all_tr)-1]]
            link_list = ['https://www.beeradvocate.com'+link.get('href') for link in a_list]
            my_list.append(link_list)
            time.sleep(randint(1,5))
        dict_of_links[name] = list(set(itertools.chain(*my_list)))
        time.sleep(randint(1,3))
    with open(file_name+".json", "w") as outfile:
        json.dump(dict_of_links, outfile)

get_all_beers_url(0, 60, dict_of_l, 'beers_url_dataset')

# Choose styles with 1000- rows, because it will take hours to scrap it or website may ban me
res = {k: v for (k, v) in json_to_dict('/content/Parsed Data/beers_url_dataset.json').items() if len(v) < 1000}
for i in res.keys():
    print(len(res[i]))

def get_unuique_beer_data(dict_of_url):
    my_list = []
    for name in dict_of_url:
        for url in dict_of_url[name]:
            req = requests.get(url, headers=call_headers())
            soup = BeautifulSoup(req.text, 'html.parser')
            try:
                beer_name = soup.find('title').text.split('|')[0].strip()
            except:
                beer_name = 'Not Given'
            try:
                brewery_name = soup.find('title').text.split('|')[1].strip()
            except:
                brewery_name = 'Not Given'
            try:
                brewery_region = soup.find_all('dd', class_='beerstats')[1].text.strip()
            except:
                brewery_region = 'Not Given'
            try:
                beer_style = soup.find_all('dd', class_='beerstats')[2].find_all('a', class_='Tooltip')[0].text.strip()
            except:
                beer_style = 'Not Given'
            try:
                beer_style_rank = int(soup.find_all('dd', class_='beerstats')[2].find_all('a', class_='Tooltip')[1].text.strip().split('#')[1])
            except:
                beer_style_rank = 'Not Given'
            try:
                beer_abv = float(soup.find_all('span', class_='Tooltip')[3].text.rstrip("%").strip())
            except:
                beer_abv = 0
            try:
                beer_score = int(soup.find('span', class_='ba-score Tooltip').text.strip())
            except:
                beer_score = 'Not Given'
            try:
                beer_score_rank = int(soup.find_all('dd', class_='beerstats')[4].find('a', class_='Tooltip').text.strip().split('#')[1].replace(",", ""))
            except:
                beer_score_rank = 'Not Given'
            try:
                beer_avg = float(soup.find('span', class_='ba-ravg Tooltip').text.strip())
            except:
                beer_avg = 0
            try:
                beer_reviews = int(soup.find('span', class_='ba-reviews Tooltip').text.strip().replace(",", ""))
            except:
                beer_reviews = 0
            try:
                beer_ratings = int(soup.find('span', class_='ba-ratings Tooltip').text.strip().replace(",", ""))
            except:
                beer_ratings = 0
            try:
                beer_wants = int(soup.find('span', class_='ba-wants Tooltip').text.strip().replace(",", ""))
            except:
                beer_wants = 0
            try:
                beer_gots = int(soup.find('span', class_='ba-gots Tooltip').text.strip().replace(",", ""))
            except:
                beer_gots = 0
            try:
                beer_notes = soup.select_one('div[style="clear:both; margin:0; padding:0px 20px; font-size:1.05em;"]').text.strip().replace('Notes:', '').replace('\n', '')
            except:
                beer_notes = 'Not Given'
            my_list.append([beer_name, brewery_name, brewery_region, beer_style, beer_style_rank, beer_abv, beer_score, beer_score_rank, beer_avg, beer_reviews, beer_ratings, beer_wants, beer_gots, beer_notes])
        print(name)
        time.sleep(randint(6,10))
    df = pd.DataFrame(my_list, columns =['BeerName', 'BreweryName', 'BreweryRegion', 'BeerStyle', 'BeerStyleRank', 'BeerABV', 'BeerScore', 'BeerScoreRank', 'BeerAvg', 'BeerReviews', 'BeerRating', 'BeerWants', 'BeerGots', 'BeerNotes'])
    print(df)
    df.to_csv('beers_dataset.csv', index=False)

get_unuique_beer_data(res)

"""# DATA EXPLORATION"""

# Loading dataset.
pd.set_option('expand_frame_repr', False)

def load_datasets_and_merge():
    df_of_beers = pd.read_csv("/content/Parsed Data/beers_dataset.csv")
    df_of_styles = pd.read_csv("/content/Parsed Data/styles_and_attributes_only.csv", sep=';')
    df = pd.merge(df_of_beers, df_of_styles, validate ="many_to_one")
    return df


raw_beers_df = load_datasets_and_merge()

# Make summarize to our dataset.

def print_summarize_dataset(dataset):
    print("Dataset dimension:")
    print(dataset.shape)
    print("First 10 rows of dataset:")
    print(dataset.head(10))
    print("Statistical summary:")
    print(dataset.describe())


print_summarize_dataset(raw_beers_df)

def clean_dataframe(df):
    df.replace({'BeerStyleRank':{'Not Given':0, 'None':0}, 'BeerScore':{'Not Given':0, 'None':0}, 'BeerScoreRank':{'Not Given':0, 'None':0}}, inplace=True)
    df['BeerStyleRank'] = df['BeerStyleRank'].astype(int)
    df['BeerScore'] = df['BeerScore'].astype(int)
    df['BeerScoreRank'] = df['BeerScoreRank'].astype(int)
    df = df.replace(['Not Given', 'None'], np.nan)
    df['BreweryRegion'].fillna(df['BreweryRegion'].mode()[0], inplace=True)
    df['BeerStyle'].fillna(df['BeerStyle'].mode()[0], inplace=True)
    df.replace({'BeerStyleRank': {0: int(df['BeerStyleRank'].mean())}, 'BeerScore': {0: int(df['BeerScore'].mean())}, 'BeerScoreRank': {0: int(df['BeerScoreRank'].mean())}, 'BeerReviews': {0: int(df['BeerReviews'].mean())}, 'BeerRating': {0: int(df['BeerRating'].mean())}, 'BeerWants': {0: int(df['BeerWants'].mean())}, 'BeerGots': {0: int(df['BeerGots'].mean())}}, inplace=True)
    df['BeerNotes'].fillna('In Progress', inplace=True)
    return df


ideal_beers_df = clean_dataframe(raw_beers_df)

print(ideal_beers_df.head())

# Check dataset for missing(NaN) values.

ideal_beers_df.isnull().sum()

ideal_beers_df.describe()

"""# DATA VISUALIZATION"""

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

def get_beer_region(dataframe):
    plt.figure(figsize=(15, 60))
    plt.title('The Beer Regions', fontsize = 20)
    sns.countplot(y='BreweryRegion', data=dataframe)


get_beer_region(ideal_beers_df)

def get_beer_region(dataframe):
    plt.figure(figsize=(15, 25))
    plt.title('The Beer Styles', fontsize = 20)
    sns.countplot(y='BeerStyle', data=dataframe, palette = "Set2")


get_beer_region(ideal_beers_df)

def print_histograms(dataset, style, col):
    most_popular_pfa = dict(ideal_beers_df.loc[(ideal_beers_df['BeerStyle'] == style), ['BeerName', 'BeerScore']].nlargest(10, 'BeerScore').values)
    beers = list(most_popular_pfa.keys())
    rating = list(most_popular_pfa.values())
    fig = plt.figure(figsize = (12, 6))
    plt.barh(beers,rating, color=col)
    plt.title(f'The MOST 10 High Scored beers of {style} style', fontsize = 20)
    plt.ylabel('Paid beers of Family category')
    plt.xlabel('Rating')
    plt.show()


print_histograms(ideal_beers_df, 'English Pale Ale', 'blue')

print_histograms(ideal_beers_df, 'Schwarzbier', 'orange')

def freq_of_ratings(dataset):
    plt.figure(figsize = (18, 8))
    plt.title('Dispensation of BeerScore', fontsize=20)
    sns.histplot(data=dataset, x="BeerScore", kde=True, color= "purple")
    plt.show()
    
    
freq_of_ratings(ideal_beers_df)

def most_wanted_beers_of_style(dataset, style):
    most_popular_gen = dict(dataset.loc[(dataset['BeerStyle'] == style), ['BeerName', 'BeerWants']].nlargest(10, 'BeerWants').values)
    genres = list(most_popular_gen.keys())
    installs = list(most_popular_gen.values())
    colors = sns.color_palette('pastel')[0:len(genres)]
    fig = plt.figure(figsize = (15, 12))
    explode = (0.2, 0.0, 0.2, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0)
    plt.title(f'The MOST 10 Wanted beers of {style} style', fontsize = 20)
    plt.pie(installs, labels = genres, colors = colors, explode=explode, shadow=True, autopct='%.0f%%')
    plt.show()


most_wanted_beers_of_style(ideal_beers_df, 'English Bitter')

most_wanted_beers_of_style(ideal_beers_df, 'Bock')

most_wanted_beers_of_style(ideal_beers_df, 'Maibock')

def max_rating(dataset):
    rev = dataset.groupby('BeerStyle')[['BeerRating']].max().sort_values(by='BeerRating', ascending=False)
    cat = []
    rat = []
    for i in range(len(rev)):
        cat.append(rev.BeerRating[i])
        rat.append(rev.index[i])
    plt.figure(figsize = (18, 8))
    plt.plot(rat, cat, color='green', marker='o')
    plt.title('Max rating of per Beer Style', fontsize=20)
    plt.xlabel('Style', fontsize=14)
    plt.ylabel('MAX Rating', fontsize=14)
    plt.xticks(rotation=90)
    plt.grid(True)
    plt.show()


max_rating(ideal_beers_df)

def reviews_categ(dataset):
    rev = dataset.groupby('BeerStyle')[['BeerReviews']].sum().sort_values(by='BeerReviews', ascending=True)
    cat = []
    r = []
    for i in range(len(rev)):
        cat.append(rev.BeerReviews[i])
        r.append(rev.index[i])
    plt.figure(figsize = (18, 8))
    plt.plot(r, cat, color='red', marker='o')
    plt.title('Number of  reviews per beer style', fontsize=20)
    plt.xlabel('Style', fontsize=14)
    plt.ylabel('Reviews', fontsize=14)
    plt.xticks(rotation=90)
    plt.grid(True)
    plt.show()


reviews_categ(ideal_beers_df)

def rank_perstyle(dataset):
    rev = dataset.groupby('BeerStyle')[['BeerStyleRank']].sum().sort_values(by='BeerStyleRank', ascending=True)
    cat = []
    r = []
    for i in range(len(rev)):
        cat.append(rev.BeerStyleRank[i])
        r.append(rev.index[i])
    plt.figure(figsize = (18, 8))
    plt.plot(r, cat, color='blue', marker='o')
    plt.title('Number of per beer style rank', fontsize=20)
    plt.xlabel('Style', fontsize=14)
    plt.ylabel('BeerStyleRank', fontsize=14)
    plt.xticks(rotation=90)
    plt.grid(True)
    plt.show()


rank_perstyle(ideal_beers_df)

def sum_beerwants_per_categ(dataset):
    mean_pr_categ = dataset.groupby('BeerStyle')[['BeerWants']].sum().sort_values(by='BeerWants', ascending=False)
    price = []
    categ = []
    for i in range(len(mean_pr_categ)):
        price.append(mean_pr_categ.BeerWants[i])
        categ.append(mean_pr_categ.index[i])
    plt.figure(figsize=(12,20))
    plt.xlabel("BeerWants")
    plt.ylabel("BeerStyle")
    graph = sns.barplot(x = price, y = categ, alpha =0.9, palette= "plasma")
    graph.set_title("The sum beer wants per Beer Style", fontsize = 20) 


sum_beerwants_per_categ(ideal_beers_df)

def sum_beerwants_per_categ(dataset):
    mean_pr_categ = dataset.groupby('BeerStyle')[['BeerGots']].sum().sort_values(by='BeerGots', ascending=False)
    price = []
    categ = []
    for i in range(len(mean_pr_categ)):
        price.append(mean_pr_categ.BeerGots[i])
        categ.append(mean_pr_categ.index[i])
    plt.figure(figsize=(12,20))
    plt.xlabel("BeerGots")
    plt.ylabel("BeerStyle")
    graph = sns.barplot(x = price, y = categ, alpha =0.9, palette= "rainbow")
    graph.set_title("The sum beer gots per Beer Style", fontsize = 20) 


sum_beerwants_per_categ(ideal_beers_df)

def compute_correlations_matrix(dataset):
    corrMatrix = dataset.corr()
    plt.figure(figsize=(15,10))
    sns.heatmap(corrMatrix, annot=True, cmap='vlag')
    plt.show()


compute_correlations_matrix(ideal_beers_df)

"""# MACHINE LEARNING"""

import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

ideal_beers_df['index'] = ideal_beers_df.index

def combine_features(dataframe, sel_features):
    return dataframe[sel_features].astype(str).apply(lambda x: ''.join(x), axis=1)

def vectorize(com_features):
    vectorizer = TfidfVectorizer()
    feature_vectors = vectorizer.fit_transform(com_features)
    return feature_vectors

def similarity(vec):
    similarities = cosine_similarity(vec)
    return similarities

def recommend(dataframe, similarities):
    beer_name = input('Enter your favourite beer name: ')

    list_of_all_titles = dataframe['BeerName'].tolist()
    find_close_match = difflib.get_close_matches(beer_name, list_of_all_titles)
    close_match = find_close_match[0]
    index_of_the_beer = dataframe[dataframe.BeerName == close_match]['index'].values[0]
    similarity_score = list(enumerate(similarities[index_of_the_beer]))
    sorted_similar_beers = sorted(similarity_score, key = lambda x:x[1], reverse = True) 
    print('Beers suggested for you: \n')
    i = 1
    for beer in sorted_similar_beers:
        index = beer[0]
        score = beer[1]
        title_from_index = dataframe[dataframe.index==index]['BeerName'].values[0]
        if i <= 10:
            print(f'{i:<2}. {title_from_index:<30} Similarity Score: {round(score*100)}')
            i += 1

com_f = combine_features(ideal_beers_df, ['BreweryName', 'BreweryRegion', 'BeerStyle', 'BeerStyleRank', 'BeerABV', 'BeerScore', 'BeerScoreRank', 'BeerAvg', 'BeerReviews', 'BeerRating', 'BeerWants', 'BeerGots', 'BeerNotes', 'StyleDescribtion', 'StyleABV', 'StyleIBU'])

vec = vectorize(com_f)

simil = similarity(vec)

recommend(ideal_beers_df, simil)

# We can write any beers from this dataset, and it gives the similar beers
# Beers: Bock, Burkhart, In Bloom, Freiheit, ...